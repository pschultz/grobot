// Automatically generated by MockGen. DO NOT EDIT!
// Source: task.go

package mocks

import (
	gomock "code.google.com/p/gomock/gomock"
)

// Mock of Task interface
type MockTask struct {
	ctrl     *gomock.Controller
	recorder *_MockTaskRecorder
}

// Recorder for MockTask (not exported)
type _MockTaskRecorder struct {
	mock *MockTask
}

func NewMockTask(ctrl *gomock.Controller) *MockTask {
	mock := &MockTask{ctrl: ctrl}
	mock.recorder = &_MockTaskRecorder{mock}
	return mock
}

func (_m *MockTask) EXPECT() *_MockTaskRecorder {
	return _m.recorder
}

func (_m *MockTask) Dependencies(invokedName string) []string {
	ret := _m.ctrl.Call(_m, "Dependencies", invokedName)
	ret0, _ := ret[0].([]string)
	return ret0
}

func (_mr *_MockTaskRecorder) Dependencies(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Dependencies", arg0)
}

func (_m *MockTask) Invoke(name string, arguments ...string) (bool, error) {
	_s := []interface{}{name}
	for _, _x := range arguments {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Invoke", _s...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTaskRecorder) Invoke(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Invoke", _s...)
}

// Mock of Describable interface
type MockDescribable struct {
	ctrl     *gomock.Controller
	recorder *_MockDescribableRecorder
}

// Recorder for MockDescribable (not exported)
type _MockDescribableRecorder struct {
	mock *MockDescribable
}

func NewMockDescribable(ctrl *gomock.Controller) *MockDescribable {
	mock := &MockDescribable{ctrl: ctrl}
	mock.recorder = &_MockDescribableRecorder{mock}
	return mock
}

func (_m *MockDescribable) EXPECT() *_MockDescribableRecorder {
	return _m.recorder
}

func (_m *MockDescribable) Description() string {
	ret := _m.ctrl.Call(_m, "Description")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockDescribableRecorder) Description() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Description")
}
